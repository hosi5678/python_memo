# list 配列をパワーアップさせた<<高機能なデータのコンテナ>>である。

# リストの作成
# list()関数を使ってリストを作成することができる。
# リストは、複数のデータをまとめて格納するためのデータ型である。
# リストを作成するには、データをカンマで区切って角括弧で囲む。
# リストの要素は、インデックスを使ってアクセスできる。
# リストの要素は、異なるデータ型を混在させることができる。
# リストの要素には、リストを含めることができる。
# リストは、要素の追加や削除が可能である。
# リストは、要素の変更が可能である。
# リストは、スライスを使って部分リストを取り出すことができる。
# リストは、リスト同士を結合することができる。
# リストは、リストの要素をソートすることができる。
# リストは、リストの要素を検索することができる。
# リストは、リストの要素をカウントすることができる。
# リストは、リストの要素を削除することができる。
# リストは、リストの要素を挿入することができる。
# リストは、リストの要素を取り出して削除することができる。

# リストの作成と長さの取得
# list1 = [1, 2, 3, 4, 5]
# print(len(list1)) # 5

# # リストの作成
# list1 = [1, 2, 3, 4, 5]
# print(list1) # [1, 2, 3, 4, 5]
# list2 = [1,2,3,4,5]

# print(list1 == list2) # True #同値性の比較
# print(list1 is list2) # True #同一性の比較

# x=[1,2,3]+[4,5]

# print(x) # [1, 2, 3, 4, 5]

# リストの要素の追加
# list1 = [1, 2, 3, 4, 5]
# list1.append(6)
# print(list1) # [1, 2, 3, 4, 5, 6]

# # リストの全要素の削除
# list1.clear()
# print(list1) # []

# リストの全要素の走査
x=["john","paul","george","ringo"]  

# range(n) は、0からn-1までの整数を生成するイテレータを返す。 

for i in range(len(x)):
    print(x[i]) # john paul george ringo
